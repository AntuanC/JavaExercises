import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Scanner;
import java.util.TreeSet;

import javax.swing.JFileChooser;

/**
 * This class reads a file, checks its words
 * for error and suggests a list of probable
 * corrections for the bad words. 
 */
public class spellCheck {

	/**
	 * main method
	 * @param args
	 */
	public static void main(String[] args) {
		HashSet<String> words = new HashSet<String>();//creating new HashSet
		
		//please take care of the path while running the code
		try {
			Scanner filein = new Scanner(new File("G:/Code/Benchmark/src/words.txt")); //open file
			
			while(filein.hasNext()) {
				String word = filein.next();
				word = word.toLowerCase();//converting to lowercase
				words.add(word);// add the words to HashSet.
			}//end of while
			
			filein.close();//close the file
			
		} catch (FileNotFoundException e) {
			System.err.println("FileNotFoundException: " + e.getMessage());
		}
		
		//display the size if it the set is not empty
		if(!words.isEmpty()){
			int size = words.size();
			System.out.println("The size of the Set is: " + size);
		}
		//checking for some words
		if(words.contains("relax") && words.contains("alaska") && words.contains("legend")){
			System.out.println("Test values successful!!");
			System.out.println("Dictionary Loaded!!");
		}
		
		System.out.println("\nIncorrect words:");
		/*ask user to select a file using the method provided
		by the instructor */
		Scanner fileopen;
		try {
			fileopen = new Scanner(getInputFileNameFromUser());
			fileopen.useDelimiter("[^a-zA-Z]+");
			while(fileopen.hasNext()) {
				String word = fileopen.next();
				word = word.toLowerCase();//converting to lowercase
				if(!words.contains(word)){
					System.out.println(word + ": ");//display words not in the HashSet/dictionary
					
					TreeSet<String> sugg = corrections(word, words);//creating new TreeSet
					
					if(sugg.isEmpty()){
						System.out.print("(No Suggestions)\n");
					}
					else{
						Iterator<String> iter = sugg.iterator();
						while (iter.hasNext())//printing the suggestions
							System.out.print(iter.next() +", ");
						System.out.println();
					}
				}
			}//end of while
		} catch (FileNotFoundException e) {
			System.err.println("FileNotFoundException: " + e.getMessage());
		}
		
		
	}
	
	/**
	 * This method takes two parameters described below and returns a list of
	 * suggestions for the bad word. The suggestions are generated by removing a 
	 * character, changing a character, adding a character, swapping neighboring 
	 * characters and inserting a space in between two characters. 
	 * @author Dixit Bhatta
	 * @param badWord is the incorrect word sent for suggestions
	 * @param dictionary is the dictionary used to lookup suggestions
	 * @return
	 */
	static TreeSet<String> corrections(String badWord, HashSet<String> dictionary) {
		TreeSet<String> sugst = new TreeSet<String>();
		for (char ch = 'a'; ch <= 'z'; ch++) {
			for(int i = 0; i < badWord.length(); i++){
				//changing one letter 
				String s = badWord.substring(0,i) + ch + badWord.substring(i+1);
				if(dictionary.contains(s))
					sugst.add(s);//add if the suggestion is in the dictionary
				
				//removing one letter from any place 
				String s2 = badWord.substring(0, i) + badWord.substring(i+1);
				if(dictionary.contains(s2))
					sugst.add(s2);//add if the suggestion is in the dictionary
				
				//inserting space in between
				String s31 = badWord.substring(0,i+1);
				String s32 = badWord.substring(i+1);
				if(dictionary.contains(s31) && dictionary.contains(s32))
					sugst.add(s31+" "+s32);///add if the suggestion is in the dictionary
				
				
				//adding one letter
				String s4 = badWord.substring(0,i+1) + ch + badWord.substring(i+1);	
				if(dictionary.contains(s4))
					sugst.add(s4);//add if the suggestion is in the dictionary
				
				//swapping two letters
				for(int i1=0;i1<badWord.length()-1;i1++){
					char l = badWord.charAt(i1), r = badWord.charAt(i1+1);
					String s5 = badWord.substring(0,i1) + r + l + badWord.substring(i1+2);
					if(dictionary.contains(s5))
						sugst.add(s5);//add if the suggestion is in the dictionary
				}//end of swapping for
			}//end of inner for
		}//end of outer for
		return sugst;
			
	}//end of suggestions

	/**
	* Lets the user select an input file using a standard file
	* selection dialog box. If the user cancels the dialog
	* without selecting a file, the return value is null.
	*/
	static File getInputFileNameFromUser() {
		JFileChooser fileDialog = new JFileChooser();
		fileDialog.setDialogTitle("Select File for Input");
		int option = fileDialog.showOpenDialog(null);
		if (option != JFileChooser.APPROVE_OPTION)
			return null;
		else
			return fileDialog.getSelectedFile();
	}//end of choosing file

}//end of class
